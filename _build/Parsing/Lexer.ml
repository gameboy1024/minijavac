# 1 "Parsing/Lexer.mll"
 
open Parser
open Lexing
open Error

let keyword_table = Hashtbl.create 17
let _ =
  List.iter (fun (k,d) -> Hashtbl.add keyword_table k d) 
   [
     "class"	    , CLASS;
     "else"         , ELSE;
     "extends"	    , EXTENDS;
     "false"        , FALSE;
     "if"           , IF;
     "in"           , IN;
     "instanceof"   , INSTANCEOF;
     "new"	    , NEW;
     "null"	    , NULL;
     "this"         , THIS;
     "true"         , TRUE;
   ]

let ident_or_keyword id =
  try Hashtbl.find keyword_table id
  with Not_found -> LIDENT id

let buff = Buffer.create 256
let buffer_string str =	Buffer.add_string buff str
let buffer_char ch    =	Buffer.add_char buff ch


# 34 "Parsing/Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\224\255\225\255\226\255\002\000\003\000\030\000\002\000\
    \001\000\236\255\238\255\239\255\240\255\031\000\242\255\243\255\
    \244\255\245\255\246\255\247\255\248\255\079\000\089\000\164\000\
    \105\000\003\000\255\255\001\000\004\000\253\255\228\255\235\255\
    \234\255\227\255\231\255\229\255\021\001\251\255\252\255\005\000\
    \221\000\255\255\254\255\138\000\252\255\253\255\254\255\006\000\
    \011\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\025\000\023\000\022\000\031\000\
    \031\000\255\255\255\255\255\255\255\255\014\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\006\000\005\000\004\000\
    \018\000\001\000\255\255\000\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \002\000\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \002\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\028\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\037\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\045\000\000\000\000\000\000\000\255\255\
    \255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\026\000\026\000\025\000\027\000\255\255\038\000\
    \046\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\006\000\002\000\025\000\000\000\009\000\008\000\031\000\
    \020\000\019\000\010\000\012\000\014\000\011\000\015\000\024\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\049\000\016\000\004\000\013\000\005\000\035\000\
    \034\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\033\000\030\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\018\000\007\000\017\000\032\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\029\000\046\000\000\000\000\000\047\000\
    \028\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\048\000\000\000\000\000\000\000\
    \022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\042\000\
    \003\000\000\000\000\000\023\000\255\255\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\038\000\
    \000\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
    \000\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\038\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\027\000\025\000\000\000\028\000\039\000\
    \047\000\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\025\000\255\255\000\000\000\000\008\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\048\000\000\000\000\000\000\000\000\000\004\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\013\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\007\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\024\000\043\000\255\255\255\255\043\000\
    \024\000\255\255\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\043\000\255\255\255\255\255\255\
    \022\000\255\255\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\040\000\
    \000\000\255\255\255\255\023\000\028\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\036\000\
    \255\255\255\255\036\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\000\
    \255\255\040\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\040\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\036\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\043\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\036\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "Parsing/Lexer.mll"
                            ( Location.incr_line lexbuf; token lexbuf )
# 217 "Parsing/Lexer.ml"

  | 1 ->
# 44 "Parsing/Lexer.mll"
                            ( token lexbuf )
# 222 "Parsing/Lexer.ml"

  | 2 ->
# 45 "Parsing/Lexer.mll"
                            ( comment (Location.curr lexbuf) lexbuf; token lexbuf )
# 227 "Parsing/Lexer.ml"

  | 3 ->
# 46 "Parsing/Lexer.mll"
                            ( token lexbuf )
# 232 "Parsing/Lexer.ml"

  | 4 ->
let
# 47 "Parsing/Lexer.mll"
                        id
# 238 "Parsing/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 47 "Parsing/Lexer.mll"
                            ( ident_or_keyword id )
# 242 "Parsing/Lexer.ml"

  | 5 ->
let
# 48 "Parsing/Lexer.mll"
                        id
# 248 "Parsing/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "Parsing/Lexer.mll"
                            ( UIDENT id )
# 252 "Parsing/Lexer.ml"

  | 6 ->
let
# 49 "Parsing/Lexer.mll"
              nb
# 258 "Parsing/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 49 "Parsing/Lexer.mll"
                            ( INT (int_of_string nb) )
# 262 "Parsing/Lexer.ml"

  | 7 ->
# 50 "Parsing/Lexer.mll"
                            ( LPAREN )
# 267 "Parsing/Lexer.ml"

  | 8 ->
# 51 "Parsing/Lexer.mll"
                            ( RPAREN )
# 272 "Parsing/Lexer.ml"

  | 9 ->
# 52 "Parsing/Lexer.mll"
                            ( LBRACE )
# 277 "Parsing/Lexer.ml"

  | 10 ->
# 53 "Parsing/Lexer.mll"
                            ( RBRACE )
# 282 "Parsing/Lexer.ml"

  | 11 ->
# 54 "Parsing/Lexer.mll"
                            ( SEMI )
# 287 "Parsing/Lexer.ml"

  | 12 ->
# 55 "Parsing/Lexer.mll"
                            ( DOT )
# 292 "Parsing/Lexer.ml"

  | 13 ->
# 56 "Parsing/Lexer.mll"
                            ( COMMA )
# 297 "Parsing/Lexer.ml"

  | 14 ->
# 57 "Parsing/Lexer.mll"
                            ( EQUAL )
# 302 "Parsing/Lexer.ml"

  | 15 ->
# 58 "Parsing/Lexer.mll"
                            ( PLUS )
# 307 "Parsing/Lexer.ml"

  | 16 ->
# 59 "Parsing/Lexer.mll"
                            ( MINUS )
# 312 "Parsing/Lexer.ml"

  | 17 ->
# 60 "Parsing/Lexer.mll"
                            ( TIMES )
# 317 "Parsing/Lexer.ml"

  | 18 ->
# 61 "Parsing/Lexer.mll"
                            ( DIV )
# 322 "Parsing/Lexer.ml"

  | 19 ->
# 62 "Parsing/Lexer.mll"
                            ( MOD )
# 327 "Parsing/Lexer.ml"

  | 20 ->
# 63 "Parsing/Lexer.mll"
                            ( AND )
# 332 "Parsing/Lexer.ml"

  | 21 ->
# 64 "Parsing/Lexer.mll"
                            ( OR )
# 337 "Parsing/Lexer.ml"

  | 22 ->
# 65 "Parsing/Lexer.mll"
                            ( NOT )
# 342 "Parsing/Lexer.ml"

  | 23 ->
# 66 "Parsing/Lexer.mll"
                            ( GT )
# 347 "Parsing/Lexer.ml"

  | 24 ->
# 67 "Parsing/Lexer.mll"
                            ( GE )
# 352 "Parsing/Lexer.ml"

  | 25 ->
# 68 "Parsing/Lexer.mll"
                            ( LT )
# 357 "Parsing/Lexer.ml"

  | 26 ->
# 69 "Parsing/Lexer.mll"
                            ( LE )
# 362 "Parsing/Lexer.ml"

  | 27 ->
# 70 "Parsing/Lexer.mll"
                            ( EQ )
# 367 "Parsing/Lexer.ml"

  | 28 ->
# 71 "Parsing/Lexer.mll"
                            ( NEQ )
# 372 "Parsing/Lexer.ml"

  | 29 ->
# 72 "Parsing/Lexer.mll"
                            ( EOF )
# 377 "Parsing/Lexer.ml"

  | 30 ->
# 74 "Parsing/Lexer.mll"
      ( 
	Buffer.reset buff;
        let string_start = lexbuf.lex_start_p in
          string (Location.curr lexbuf) lexbuf;
          lexbuf.lex_start_p <- string_start;
          STRING (Buffer.contents buff) 
      )
# 388 "Parsing/Lexer.ml"

  | 31 ->
let
# 81 "Parsing/Lexer.mll"
         ch
# 394 "Parsing/Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 81 "Parsing/Lexer.mll"
             ( illegal_char ch (Location.curr lexbuf) )
# 398 "Parsing/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string start_loc lexbuf =
    __ocaml_lex_string_rec start_loc lexbuf 36
and __ocaml_lex_string_rec start_loc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 84 "Parsing/Lexer.mll"
                         ( () )
# 409 "Parsing/Lexer.ml"

  | 1 ->
let
# 85 "Parsing/Lexer.mll"
                     ch
# 415 "Parsing/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 85 "Parsing/Lexer.mll"
                         ( buffer_string ch; string start_loc lexbuf )
# 419 "Parsing/Lexer.ml"

  | 2 ->
# 86 "Parsing/Lexer.mll"
                         ( illegal_escape_char (Location.curr lexbuf) )
# 424 "Parsing/Lexer.ml"

  | 3 ->
# 87 "Parsing/Lexer.mll"
                         ( unterminated_string start_loc )
# 429 "Parsing/Lexer.ml"

  | 4 ->
let
# 88 "Parsing/Lexer.mll"
         ch
# 435 "Parsing/Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 88 "Parsing/Lexer.mll"
                         ( buffer_char ch; string start_loc lexbuf )
# 439 "Parsing/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec start_loc lexbuf __ocaml_lex_state

and comment start_loc lexbuf =
    __ocaml_lex_comment_rec start_loc lexbuf 43
and __ocaml_lex_comment_rec start_loc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 91 "Parsing/Lexer.mll"
            ( () )
# 450 "Parsing/Lexer.ml"

  | 1 ->
# 92 "Parsing/Lexer.mll"
            ( Location.incr_line lexbuf; comment start_loc lexbuf )
# 455 "Parsing/Lexer.ml"

  | 2 ->
# 93 "Parsing/Lexer.mll"
            ( comment start_loc lexbuf )
# 460 "Parsing/Lexer.ml"

  | 3 ->
# 94 "Parsing/Lexer.mll"
            ( unterminated_comment start_loc )
# 465 "Parsing/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec start_loc lexbuf __ocaml_lex_state

;;

